[{"content":"","date":"2025-02-04T23:00:31+08:00","permalink":"https://Jayzk707.github.io/p/%E8%BF%99%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%98%AF%E8%AF%84%E8%AE%BA%E6%B5%8B%E8%AF%95%E6%AC%A2%E8%BF%8E%E5%A4%A7%E5%AE%B6%E6%9D%A5%E8%AF%84%E8%AE%BA/","title":"这篇博客是评论测试,欢迎大家来评论"},{"content":"这是文章的公开部分内容，所有人都可以看到。\n更多文章内容。\n","date":"2025-02-03T12:36:03+08:00","permalink":"https://Jayzk707.github.io/p/id/","title":"Id"},{"content":"在这篇博客中，我们将学习如何使用简单的 HTML、CSS 和 JavaScript 来实现点击图片时放大，并且在透明背景上展示放大后的图片。这是一种常见的前端效果，能显著提升用户体验。\n说明 如果遇到问题可以进交流群： https://t.me/+zYAVADAj9C8xZDBh\n使用到的图片案例 下面展示一些科技风格的图片案例，点击图片即可放大查看详情。\n\u0026times; 1. 实现透明背景的放大效果（代码详解） 下面是实现点击图片放大并显示透明背景效果的完整代码示例。\n1.1 HTML 结构 我们首先创建一个基础的 HTML 页面，其中包含一个模态框用于放大图片显示，以及几个示例图片：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;透明背景放大图片效果\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* 透明背景模态框 */ .modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0, 0, 0, 0.7); text-align: center; padding-top: 60px; } /* 放大的图片 */ .modal-content { margin: auto; display: block; width: 80%; max-width: 700px; transition: transform 0.25s ease; } /* 关闭按钮 */ .close { position: absolute; top: 15px; right: 35px; color: #fff; font-size: 40px; font-weight: bold; cursor: pointer; background-color: transparent; border: none; } .close:hover { color: #f1f1f1; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 模态框 --\u0026gt; \u0026lt;div class=\u0026#34;modal\u0026#34; id=\u0026#34;myModal\u0026#34; onclick=\u0026#34;closeModal(event)\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;close\u0026#34; onclick=\u0026#34;closeModal(event)\u0026#34;\u0026gt;\u0026amp;times;\u0026lt;/button\u0026gt; \u0026lt;img class=\u0026#34;modal-content\u0026#34; id=\u0026#34;img01\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h2\u0026gt;点击图片放大并透明背景示例\u0026lt;/h2\u0026gt; \u0026lt;!-- 示例图片 --\u0026gt; \u0026lt;img src=\u0026#34;https://via.placeholder.com/150/0000FF/808080?Text=Demo1\u0026#34; width=\u0026#34;150\u0026#34; height=\u0026#34;150\u0026#34; onclick=\u0026#34;openModal(this)\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://via.placeholder.com/150/FF6347/FFFFFF?Text=Demo2\u0026#34; width=\u0026#34;150\u0026#34; height=\u0026#34;150\u0026#34; onclick=\u0026#34;openModal(this)\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://via.placeholder.com/150/000000/FFFFFF?Text=Demo3\u0026#34; width=\u0026#34;150\u0026#34; height=\u0026#34;150\u0026#34; onclick=\u0026#34;openModal(this)\u0026#34;\u0026gt; \u0026lt;script\u0026gt; function openModal(imgElement) { var modal = document.getElementById(\u0026#34;myModal\u0026#34;); var modalImg = document.getElementById(\u0026#34;img01\u0026#34;); modal.style.display = \u0026#34;block\u0026#34;; modalImg.src = imgElement.src; } function closeModal(event) { if (event.target === event.currentTarget || event.target.className.indexOf(\u0026#39;close\u0026#39;) !== -1) { document.getElementById(\u0026#34;myModal\u0026#34;).style.display = \u0026#34;none\u0026#34;; } } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1.2 代码说明 模态框：通过一个 \u0026lt;div\u0026gt; 实现，设置 display: none; 隐藏，当点击图片时通过 JavaScript 将其显示出来。 点击图片放大：给图片添加 onclick=\u0026quot;openModal(this)\u0026quot; 事件，当点击时，将图片的 src 赋值给模态框中的 \u0026lt;img\u0026gt; 元素并显示模态框。 关闭模态框：点击模态框背景或关闭按钮时，调用 closeModal(event) 函数，将模态框隐藏。 2. 总结 通过上述方法，您可以在网页中实现一个简单的图片放大效果，并在放大时使用透明背景显示图片。此效果能够显著提升用户体验，尤其适用于展示科技感、细节丰富的图片。\n希望这个教程对您有所帮助！如果有任何疑问或改进建议，欢迎在评论区留言交流。\n","date":"2025-02-01T14:18:01+08:00","permalink":"https://Jayzk707.github.io/p/%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7%E5%9B%BE%E7%89%87%E5%B9%B6%E6%98%BE%E7%A4%BA%E9%80%8F%E6%98%8E%E8%83%8C%E6%99%AF/","title":"如何在网页中实现点击放大图片并显示透明背景"},{"content":"在这篇教程中，我们将介绍如何使用 HTML5、CSS 和 JavaScript 制作一个简单的贪吃蛇游戏。这是一个非常适合初学者的项目，可以帮助你掌握 JavaScript 中的事件处理、动画以及动态界面的更新。\n游戏概述 贪吃蛇游戏的基本玩法是，玩家通过键盘控制蛇的方向，让蛇不断吃到食物，蛇身会逐渐变长。如果蛇撞到自己的身体或屏幕边缘，游戏结束。\n步骤 1：HTML 结构 首先，我们需要构建游戏的 HTML 结构。游戏的主要内容放置在一个 \u0026lt;canvas\u0026gt; 元素中，用来渲染游戏画面。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;贪吃蛇游戏\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;game-container\u0026#34;\u0026gt; \u0026lt;canvas id=\u0026#34;gameCanvas\u0026#34; width=\u0026#34;480\u0026#34; height=\u0026#34;320\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;game.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 步骤 2：CSS 样式 接下来，我们为游戏设置一些基本样式，确保 \u0026lt;canvas\u0026gt; 元素居中显示，并且背景颜色适合游戏界面。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 body { font-family: Arial, sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; background-color: #f4f4f4; } .game-container { border: 2px solid #000; } canvas { background-color: #000; } 步骤 3：JavaScript 代码 最后，我们编写 JavaScript 代码来实现贪吃蛇的逻辑，包括蛇的移动、食物的生成、以及游戏结束的判断。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 const canvas = document.getElementById(\u0026#34;gameCanvas\u0026#34;); const ctx = canvas.getContext(\u0026#34;2d\u0026#34;); // 游戏设置 const gridSize = 20; const canvasSize = 480; const snakeSpeed = 100; let snake = [{ x: 160, y: 160 }]; let food = { x: 100, y: 100 }; let direction = { x: gridSize, y: 0 }; let gameOver = false; // 键盘控制 document.addEventListener(\u0026#34;keydown\u0026#34;, (e) =\u0026gt; { if (e.key === \u0026#34;ArrowUp\u0026#34; \u0026amp;\u0026amp; direction.y === 0) { direction = { x: 0, y: -gridSize }; } else if (e.key === \u0026#34;ArrowDown\u0026#34; \u0026amp;\u0026amp; direction.y === 0) { direction = { x: 0, y: gridSize }; } else if (e.key === \u0026#34;ArrowLeft\u0026#34; \u0026amp;\u0026amp; direction.x === 0) { direction = { x: -gridSize, y: 0 }; } else if (e.key === \u0026#34;ArrowRight\u0026#34; \u0026amp;\u0026amp; direction.x === 0) { direction = { x: gridSize, y: 0 }; } }); // 游戏循环 function gameLoop() { if (gameOver) { alert(\u0026#34;游戏结束！\u0026#34;); return; } moveSnake(); checkCollision(); drawGame(); setTimeout(gameLoop, snakeSpeed); } // 移动蛇 function moveSnake() { const newHead = { x: snake[0].x + direction.x, y: snake[0].y + direction.y }; snake.unshift(newHead); // 检查是否吃到食物 if (newHead.x === food.x \u0026amp;\u0026amp; newHead.y === food.y) { generateFood(); } else { snake.pop(); } } // 绘制游戏画面 function drawGame() { ctx.clearRect(0, 0, canvas.width, canvas.height); // 绘制蛇 ctx.fillStyle = \u0026#34;green\u0026#34;; for (let i = 0; i \u0026lt; snake.length; i++) { ctx.fillRect(snake[i].x, snake[i].y, gridSize, gridSize); } // 绘制食物 ctx.fillStyle = \u0026#34;red\u0026#34;; ctx.fillRect(food.x, food.y, gridSize, gridSize); } // 生成食物 function generateFood() { food = { x: Math.floor(Math.random() * (canvas.width / gridSize)) * gridSize, y: Math.floor(Math.random() * (canvas.height / gridSize)) * gridSize, }; } // 检查碰撞 function checkCollision() { // 碰到边界 if ( snake[0].x \u0026lt; 0 || snake[0].x \u0026gt;= canvas.width || snake[0].y \u0026lt; 0 || snake[0].y \u0026gt;= canvas.height ) { gameOver = true; } // 碰到自己 for (let i = 1; i \u0026lt; snake.length; i++) { if (snake[i].x === snake[0].x \u0026amp;\u0026amp; snake[i].y === snake[0].y) { gameOver = true; } } } // 启动游戏 gameLoop(); \u003c!DOCTYPE html\u003e 透明背景放大图片效果 \u0026times; 点击图片预览 HTML5 Canvas：用于绘制游戏画面。 JavaScript：负责游戏逻辑和事件处理。 CSS：用于设置游戏界面的样式。 你可以通过以下链接获取这些标志的更多信息：\nHTML5 Canvas Logo JavaScript Logo CSS Logo 希望这些信息对你有所帮助！\n示例代码 这是我自己搭建好的你可以访问以下链接来查看完整的贪吃蛇游戏代码和运行效果：\n贪吃蛇游戏代码示例 总结 在这个项目中，我们使用 HTML5、CSS 和 JavaScript 实现了一个简单的贪吃蛇游戏。通过这个项目，你可以学到如何使用 Canvas 渲染游戏界面，如何处理键盘输入，以及如何编写游戏逻辑。\n希望这个教程对你有所帮助，祝你编码愉快！\n","date":"2025-02-01T13:36:49+08:00","image":"https://s1.aigei.com/src/img/gif/0f/0f6e62a7bbbc4e84adaabe3e3221a5db.gif?imageMogr2/auto-orient/thumbnail/!282x282r/gravity/Center/crop/282x282/quality/85/%7CimageView2/2/w/282\u0026e=2051020800\u0026token=P7S2Xpzfz11vAkASLTkfHN7Fw-oOZBecqeJaxypL:bYKyPX46r566QGWsJf2FA_-VviY=","permalink":"https://Jayzk707.github.io/p/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-javascript-%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E9%A1%B5%E8%B4%AA%E5%90%83%E8%9B%87%E6%B8%B8%E6%88%8F/","title":"如何使用 JavaScript 制作一个简单的网页贪吃蛇游戏"},{"content":"为什么要自学 每个人的基础和背景都不一样，学习并不是一件简单的事情。老师教授的内容通常是针对中等水平的学生，而每个人的学习情况不同，因此主动学习、针对自身基础进行调整，才能更好地掌握知识。 Your browser does not support the video tag. 我为什么会开始自学 我之所以开始自学，最本质的原因是想提高认知，从而提升自己，实现更好的赚钱能力。以下是促使我自学的几个关键原因： 1. 防止被骗 在大学一年级的时候，我曾被网上的“知识无用论”影响，认为学习无意义。这里的“知识”并非学校课程，而是课外书籍和能够促使行动的知识。\n当时我没有什么社会经验，正值区块链和元宇宙大热，许多 NFT 头像（如猴子 IP）成为热门投资项目。有人告诉我可以通过区块链赚钱，我轻信了，结果被骗了钱。\n骗子往往很聪明，提高自我认知和警觉意识非常重要！\n2. 提高认知 被骗后，我开始反思，意识到他们所谓的赚钱方式存在明显的逻辑漏洞——为什么教我赚钱还要我交钱？ 这让我意识到认知的重要性。\n如果我有更高的认知水平，就可以更轻松地识破骗局。因此，我决定自学技术，不再盲目相信他人。 3. 防止误入歧途 被骗后，我一度有过一个错误的想法：“他们能骗我，为什么我不能去骗别人？”\n但很快我意识到，这种思维是极度错误的。即使能短期获利，最终也会一无所有。我没有去骗人，但这种想法的出现让我警惕，促使我开始真正提升自己。\n如何去自学 1. 阅读：从感兴趣的书籍开始 我建议从自己感兴趣的书籍开始阅读。即使是小说也没关系，但尽量选择简单的自我提升类书籍。\n推荐书籍：《认知觉醒》——周岭\n这本书开启了我的自学之路，并给予了我极大的动力。\n在阅读时，可以挑自己喜欢的部分读，如果某个章节不感兴趣，可以跳过。初期的重点不是收获知识，而是培养阅读和动手能力的习惯。\n2. 明确自学目标 在开始自学前，先明确目标：\n是想增强技能？ 提高认知？ 还是拓展视野？ 有了清晰的目标，才能更有针对性地安排学习计划。\n3. 培养自主学习能力 自学的关键是培养主动学习的意识和方法，除了阅读，还要善于思考、总结和实践，养成探索和求知的习惯。\n4. 合理安排时间 自学需要投入大量时间和精力，因此要合理规划，避免盲目学习或过度学习。可以将学习目标分解成小任务，每天完成一部分。\n5. 善用学习资源 除了书籍，还可以利用：\n网络课程（如 Coursera 、网易云课堂） 视频教程（如 B 站 、YouTube） 专业论坛（如 V2EX 、CSDN） 选择适合自己的学习方式，让自学更高效。\n6. 坚持反思与总结 定期回顾学习内容，分析方法的优缺点，调整策略。 保持积极的心态，相信自己的成长。 结语 自学是一个漫长的过程，需要耐心和毅力。如今，我已经通过自学掌握了许多以前无法想象的知识。\n希望这篇文章能激励更多人开始自学，提升认知，实现更大的目标！ 🚀\n![自学]\n","date":"2025-01-30T00:00:00Z","image":"https://vcg00.cfp.cn/creative/vcg/800/new/VCG211469741377.gif","permalink":"https://Jayzk707.github.io/p/self-learning/","title":"这个博客我会一直维护下去"},{"content":"引言 在现代软件开发中，开发者们常常依赖于各种在线工具来提高工作效率和代码质量。无论是托管代码，还是即时分享和编辑代码，这些平台和工具都在帮助开发者实现更高效的工作流。本文将介绍一些备受推崇的在线代码编辑器和资源分享平台，并提供相应的链接，方便你快速访问和使用。\n1. GitHub GitHub 是全球最大的代码托管平台，支持版本控制和协作开发。无论是开源项目，还是私人仓库，GitHub 都能为开发者提供一个可靠且易于使用的解决方案。通过 GitHub，开发者可以轻松地管理和共享自己的代码，同时还能参与到开源社区的合作中。\n访问 GitHub\n2. GitLab GitLab 是一个提供源代码管理、CI/CD 和 DevOps 功能的综合平台。GitLab 提供了强大的版本控制功能，允许开发者在一个平台上进行项目管理、持续集成和自动化部署等任务，极大地提高了开发效率。\n访问 GitLab\n3. CodePen CodePen 是一个社交化的前端开发环境，允许开发者实时预览和分享 HTML、CSS 和 JavaScript 代码片段。它是前端开发者必不可少的工具之一，尤其是在快速原型设计和分享小项目时非常有用。\n访问 CodePen\n4. Replit Replit 是一个支持多种编程语言的在线编程环境，提供即时运行和协作功能。Replit 使得编写、运行和分享代码变得极其简单，支持数十种编程语言，并允许开发者在云端实时协作。\n访问 Replit\n5. PasteBin PasteBin 是一个用于存储和分享文本的在线平台，广泛用于代码片段的共享。用户可以将代码粘贴到 PasteBin 中并生成链接，分享给其他开发者。这个平台是开发者之间快速交换代码的一种便捷方式。\n访问 PasteBin\n6. JSFiddle JSFiddle 是一个在线的 HTML、CSS 和 JavaScript 编辑器，方便开发者快速测试和分享代码。它允许开发者在浏览器中直接编写并运行代码，并且可以方便地分享链接给其他人，进行协作和讨论。\n访问 JSFiddle\n结论 这些平台不仅提供了强大的功能，还促进了开发者之间的协作和知识共享。无论你是一个新手还是经验丰富的开发者，这些工具都会帮助你在日常的开发工作中提高效率，并扩展你的技术边界。通过这些在线平台，你可以更轻松地管理代码、分享资源并与他人合作。\n通过访问上面提到的各个平台，你将能够更好地与开发者社区连接，并利用这些工具为你的项目增添更多可能性。\n标签： GitHub, GitLab, CodePen, Replit, PasteBin, JSFiddle\n","date":"2025-01-30T02:33:30+08:00","permalink":"https://Jayzk707.github.io/p/%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E4%BE%BF%E6%8D%B7%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB%E4%BB%A3%E7%A0%81%E5%92%8C%E8%B5%84%E6%BA%90/","title":"开发者的便捷工具：分享代码和资源"},{"content":"","date":"2025-01-29T23:25:57+08:00","permalink":"https://Jayzk707.github.io/p/kk2c3-self-introduction/","title":"Kk2C3 Self Introduction"}]